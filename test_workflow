#!/usr/bin/env node

/**
 * Standalone MCP Workflow Test Script
 * Tests CARTO workflow execution via MCP protocol
 *
 * No dependencies on CARTO platform code - pure Node.js
 */

const fs = require("fs");
const path = require("path");

// Load environment variables from .env.local
const envPath = path.join(__dirname, ".env.local");

try {
  const envFile = fs.readFileSync(envPath, "utf8");
  envFile.split("\n").forEach((line) => {
    const match = line.match(/^([^#][^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      const value = match[2].trim();
      process.env[key] = value;
    }
  });
} catch (error) {
  console.error("Error reading .env.local file:", error.message);
  process.exit(1);
}

// Configuration
const MCP_SERVER_URL = process.env.CARTO_MCP_SERVER_URL;
const API_TOKEN = process.env.CARTO_API_TOKEN;
const WORKFLOW_ID = "54901000-61d3-49f6-a9ae-ec6a38a220f4";
const TOOLNAME = process.argv[2] || "get_buffer_around_location";

if (!MCP_SERVER_URL || !API_TOKEN) {
  console.error(
    "‚ùå Missing required environment variables: CARTO_MCP_SERVER_URL and CARTO_API_TOKEN"
  );
  console.error("   Please ensure .env.local file exists with these variables");
  process.exit(1);
}

// JFK center coordinates
const CENTER = {
  latitude: 40.6413,
  longitude: -73.7781,
};

console.log("üöÄ CARTO MCP Workflow Test");
console.log("=".repeat(60));
console.log(`üìç MCP Server: ${MCP_SERVER_URL}`);
console.log(`üîß Tool: ${TOOLNAME}`);
console.log(`üó∫Ô∏è  Test Input: (${CENTER.latitude}, ${CENTER.longitude})`);
console.log("=".repeat(60));

async function callWorkflow(toolName) {
  const request = {
    jsonrpc: "2.0",
    method: "tools/call",
    params: {
      name: toolName,
      arguments: CENTER,
    },
    id: 2,
  };

  try {
    const response = await fetch(MCP_SERVER_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_TOKEN}`,
        "Content-Type": "application/json",
        Accept: "application/json, text/event-stream",
      },
      body: JSON.stringify(request),
    });

    const text = await response.text();

    // Parse SSE response
    const lines = text.split("\n");
    let jsonData = null;

    for (const line of lines) {
      if (line.startsWith("data: ")) {
        jsonData = JSON.parse(line.substring(6));
      }
    }

    if (jsonData && jsonData.result && jsonData.result.content) {
      const content = jsonData.result.content[0];

      if (content.text.startsWith("Error")) {
        console.log("‚ùå Workflow execution failed!");
        console.log(content.text);
        return false;
      } else {
        console.log("‚úÖ Workflow executed successfully!");
        console.log(content.text);
        return true;
      }
    } else if (jsonData && jsonData.error) {
      console.log("‚ùå MCP error:", jsonData.error.message);
      return false;
    }
  } catch (error) {
    console.log("‚ùå Error calling workflow:", error.message);
    return false;
  }
}

async function main() {
  const success = await callWorkflow(TOOLNAME);

  console.log("=".repeat(60));
  if (!success) {
    console.log("‚ùå Test failed");
  }

  process.exit(success ? 0 : 1);
}

main();
