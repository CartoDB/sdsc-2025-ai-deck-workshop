#!/usr/bin/env node

/**
 * Standalone MCP Workflow Test Script
 * Tests CARTO workflow execution via MCP protocol
 *
 * No dependencies on CARTO platform code - pure Node.js
 */

const fs = require("fs");
const path = require("path");

// Load environment variables from .env.local
const envPath = path.join(__dirname, ".env.local");

try {
  const envFile = fs.readFileSync(envPath, "utf8");
  envFile.split("\n").forEach((line) => {
    const match = line.match(/^([^#][^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      const value = match[2].trim();
      process.env[key] = value;
    }
  });
} catch (error) {
  console.error("Error reading .env.local file:", error.message);
  process.exit(1);
}

// Configuration
const MCP_SERVER_URL = process.env.CARTO_MCP_SERVER_URL;
const API_TOKEN = process.env.CARTO_API_TOKEN;
const WORKFLOW_ID = "54901000-61d3-49f6-a9ae-ec6a38a220f4";
const TOOLNAME = "demo_tool";

if (!MCP_SERVER_URL || !API_TOKEN) {
  console.error(
    "‚ùå Missing required environment variables: CARTO_MCP_SERVER_URL and CARTO_API_TOKEN"
  );
  console.error("   Please ensure .env.local file exists with these variables");
  process.exit(1);
}

// Madrid center coordinates
const MADRID_CENTER = {
  latitude: 40,
  longitude: 3,
};

console.log("üöÄ CARTO MCP Workflow Test");
console.log("=".repeat(60));
console.log(`üìç MCP Server: ${MCP_SERVER_URL}`);
console.log(`üìä Workflow ID: ${WORKFLOW_ID}`);
console.log(
  `üó∫Ô∏è  Test Input: Madrid Center (${MADRID_CENTER.latitude}, ${MADRID_CENTER.longitude})`
);
console.log("=".repeat(60));
console.log("");

async function listTools() {
  console.log("üìã Step 1: Listing available MCP tools...\n");

  const request = {
    jsonrpc: "2.0",
    method: "tools/list",
    id: 1,
  };

  try {
    const response = await fetch(MCP_SERVER_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_TOKEN}`,
        "Content-Type": "application/json",
        Accept: "application/json, text/event-stream",
      },
      body: JSON.stringify(request),
    });

    const text = await response.text();

    // MCP returns SSE format, parse it
    const lines = text.split("\n");
    let jsonData = null;

    for (const line of lines) {
      if (line.startsWith("data: ")) {
        jsonData = JSON.parse(line.substring(6));
      }
    }

    if (jsonData && jsonData.result && jsonData.result.tools) {
      console.log(`‚úÖ Found ${jsonData.result.tools.length} tool(s):\n`);

      jsonData.result.tools.forEach((tool, index) => {
        console.log(`   ${index + 1}. ${tool.name}`);
        console.log(`      Description: ${tool.description}`);
        console.log(`      Input Schema:`);
        console.log(
          `      ${JSON.stringify(tool.inputSchema, null, 6)
            .split("\n")
            .join("\n      ")}`
        );
        console.log("");
      });

      return jsonData.result.tools[0]?.name;
    } else {
      console.error("‚ùå Unexpected response format:", jsonData);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error listing tools:", error.message);
    return null;
  }
}

async function callWorkflow(toolName) {
  console.log(`\nüîß Step 2: Calling workflow "${toolName}"...\n`);

  const request = {
    jsonrpc: "2.0",
    method: "tools/call",
    params: {
      name: toolName,
      arguments: MADRID_CENTER,
    },
    id: 2,
  };

  console.log("üì§ Request:");
  console.log(JSON.stringify(request, null, 2));
  console.log("");

  try {
    const response = await fetch(MCP_SERVER_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_TOKEN}`,
        "Content-Type": "application/json",
        Accept: "application/json, text/event-stream",
      },
      body: JSON.stringify(request),
    });

    const text = await response.text();

    // Parse SSE response
    const lines = text.split("\n");
    let jsonData = null;

    for (const line of lines) {
      if (line.startsWith("data: ")) {
        jsonData = JSON.parse(line.substring(6));
      }
    }

    console.log("üì• Response:");
    console.log(JSON.stringify(jsonData, null, 2));
    console.log("");

    if (jsonData && jsonData.result && jsonData.result.content) {
      const content = jsonData.result.content[0];

      if (content.text.startsWith("Error")) {
        console.error("‚ùå Workflow execution failed!");
        console.error(`   ${content.text}`);
        return false;
      } else {
        console.log("‚úÖ Workflow executed successfully!");
        console.log(`   Result: ${content.text}`);
        return true;
      }
    } else if (jsonData && jsonData.error) {
      console.error("‚ùå MCP error:", jsonData.error.message);
      return false;
    }
  } catch (error) {
    console.error("‚ùå Error calling workflow:", error.message);
    return false;
  }
}

async function main() {
  await listTools();

  const success = await callWorkflow(TOOLNAME);

  console.log("\n" + "=".repeat(60));
  if (success) {
    console.log("‚úÖ Test completed successfully!");
  } else {
    console.log("‚ùå Test failed - workflow execution error");
    console.log("\nüîç Next steps to debug:");
    console.log("   1. Check workflow configuration in database");
    console.log("   2. Verify MCP tool output endpoint");
    console.log("   3. Check workflow parameter mapping");
  }
  console.log("=".repeat(60));

  process.exit(success ? 0 : 1);
}

main();
