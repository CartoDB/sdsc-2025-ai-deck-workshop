#!/usr/bin/env node

/**
 * List CARTO MCP Tools
 * Lists available tools from the CARTO MCP server
 */

const fs = require('fs');
const path = require('path');

// Load environment variables from .env.local
const envPath = path.join(__dirname, '.env.local');

try {
  const envFile = fs.readFileSync(envPath, 'utf8');
  envFile.split('\n').forEach(line => {
    const match = line.match(/^([^#][^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      const value = match[2].trim();
      process.env[key] = value;
    }
  });
} catch (error) {
  console.error('Error reading .env.local file:', error.message);
  process.exit(1);
}

// Configuration
const MCP_SERVER_URL = process.env.CARTO_MCP_SERVER_URL;
const API_TOKEN = process.env.CARTO_API_TOKEN;

if (!MCP_SERVER_URL || !API_TOKEN) {
  console.error('‚ùå Missing required environment variables: CARTO_MCP_SERVER_URL and CARTO_API_TOKEN');
  console.error('   Please ensure .env.local file exists with these variables');
  process.exit(1);
}

console.log("üîç CARTO MCP Tools List");
console.log("=".repeat(60));
console.log(`üìç MCP Server: ${MCP_SERVER_URL}`);
console.log("=".repeat(60));
console.log("");

async function listTools() {
  console.log("üìã Fetching available MCP tools...\n");

  const request = {
    jsonrpc: "2.0",
    method: "tools/list",
    id: 1,
  };

  try {
    const response = await fetch(MCP_SERVER_URL, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${API_TOKEN}`,
        "Content-Type": "application/json",
        Accept: "application/json, text/event-stream",
      },
      body: JSON.stringify(request),
    });

    const text = await response.text();

    // MCP returns SSE format, parse it
    const lines = text.split("\n");
    let jsonData = null;

    for (const line of lines) {
      if (line.startsWith("data: ")) {
        jsonData = JSON.parse(line.substring(6));
      }
    }

    if (jsonData && jsonData.result && jsonData.result.tools) {
      console.log(`‚úÖ Found ${jsonData.result.tools.length} tool(s):\n`);

      jsonData.result.tools.forEach((tool, index) => {
        console.log(`   ${index + 1}. ${tool.name}`);
      });

      console.log("");
      console.log("=".repeat(60));
      return true;
    } else {
      console.error("‚ùå Unexpected response format:", jsonData);
      return false;
    }
  } catch (error) {
    console.error("‚ùå Error listing tools:", error.message);
    return false;
  }
}

async function main() {
  const success = await listTools();
  process.exit(success ? 0 : 1);
}

main();
